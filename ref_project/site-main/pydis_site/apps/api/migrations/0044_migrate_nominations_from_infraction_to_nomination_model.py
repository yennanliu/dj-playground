# Generated by Django 2.2.5 on 2019-09-30 12:15
import logging

from django.db import migrations
from django.db.models import Q

log = logging.getLogger('nomination_migration')


def migrate_nominations_to_new_model(apps, schema_editor):
    """
    Migrations nominations from the infraction model to the nomination model.

    This migration works by replaying the nomination history in chronological order, adding and
    ending nominations as we've recorded them.
    """
    Infraction = apps.get_model('api', 'Infraction')
    Nomination = apps.get_model('api', 'Nomination')

    all_nominations = (
        Q(reason__startswith="Helper nomination:") | Q(reason__startswith="Unwatched (talent-pool):")
    )

    for infraction in Infraction.objects.filter(all_nominations).order_by('inserted_at'):
        if infraction.reason.startswith("Helper nomination:"):
            if Nomination.objects.filter(user=infraction.user, active=True).exists():
                log.error(
                    f"User `{infraction.user.id}` already has an active nomination, aborting."
                )
                continue
            nomination = Nomination(
                user=infraction.user,
                inserted_at=infraction.inserted_at,
                reason=infraction.reason[19:],  # Strip "Helper nomination: " prefix
                actor=infraction.actor,
                active=True,
            )
            nomination.save()
            infraction.delete()
        elif infraction.reason.startswith("Unwatched (talent-pool):"):
            if not Nomination.objects.filter(user=infraction.user, active=True).exists():
                log.error(
                    f"User `{infraction.user.id}` has no active nomination, can't end it!"
                )
                continue
            nomination = Nomination.objects.get(user=infraction.user, active=True)
            nomination.end_reason = infraction.reason[25:]  # Strip "Unwatched (talent-pool):"
            nomination.ended_at = infraction.inserted_at
            nomination.active = False
            nomination.save()
            infraction.delete()
        else:
            log.error(f"I don't understand this infraction: {infraction}")


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0043_infraction_hidden_warnings_to_notes'),
    ]

    operations = [
        migrations.RunPython(migrate_nominations_to_new_model),
    ]
